import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
# 示例
# 生成随机数据

# drug_types = ['Drug 1', 'Drug 2', 'Drug 3',
#               'Drug 1', 'Drug 2', 'Drug 3',
#               'Drug 1', 'Drug 2', 'Drug 3',
#               'Drug 1', 'Drug 2', 'Drug 3',
#               'Drug 1', 'Drug 2', 'Drug 3']
# weights = np.random.rand(15, 2)
# weights = np.random.binomial(1, 0.5, size=(15, 2))
# weights = [[5.1531e-01, 4.8469e-01],
#            [8.7494e-01, 1.2506e-01],
#            [6.8637e-02, 9.3136e-01],
#            [3.8709e-02, 9.6129e-01],
#            [4.1981e-02, 9.5802e-01],
#            [2.7176e-01, 7.2824e-01],
#            [1.4047e-01, 8.5953e-01],
#            [8.1480e-02, 9.1852e-01],
#            [6.4113e-01, 3.5887e-01],
#            [8.9102e-01, 1.0898e-01],
#            [8.4017e-02, 9.1598e-01],
#            [4.4816e-01, 5.5184e-01],
#            [9.9775e-03, 9.9002e-01],
#            [9.1023e-01, 8.9765e-02],
#            [9.9693e-01, 3.0730e-03]]

drug_types = ['Antioxidants', 'Antioxidants', 'Antioxidants',
              'Hormone_Antagonists', 'Hormone_Antagonists', 'Hormone_Antagonists',
              'Anilides','Anilides', 'Anilides',
              'Enzyme_Inhibitors', 'Enzyme_Inhibitors', 'Enzyme_Inhibitors']

# Antioxidants = {'Ascorbic acid': '[H][C@@]1(OC(=O)C(O)=C1O)[C@@H](O)CO',
#                 'Probucol': 'CC(C)(SC1=CC(=C(O)C(=C1)C(C)(C)C)C(C)(C)C)SC1=CC(=C(O)C(=C1)C(C)(C)C)C(C)(C)C',
#                 'Resveratrol': 'OC1=CC=C(\C=C\C2=CC(O)=CC(O)=C2)C=C1'}
#
# Hormone_Antagonists = {'Fluconazole': 'OC(CN1C=NC=N1)(CN1C=NC=N1)C1=C(F)C=C(F)C=C1',
#                        'Flutamide': "CC(C)C(=O)NC1=CC(=C(C=C1)[N+]([O-])=O)C(F)(F)F",
#                        'Exemestane': '[H][C@@]12CCC(=O)[C@@]1(C)CC[C@@]1([H])[C@@]2([H])CC(=C)C2=CC(=O)C=C[C@]12C'}
#
# Anilides = {'Acetaminophen': 'CC(=O)NC1=CC=C(O)C=C1',
#             'Bupivacaine': 'CCCCN1CCCCC1C(=O)NC1=C(C)C=CC=C1C',
#             'Prilocaine': 'CCCNC(C)C(=O)NC1=CC=CC=C1C'}
#
# Enzyme_Inhibitors = {"Carbidopa":"C[C@@](CC1=CC(O)=C(O)C=C1)(NN)C(O)=O",
#                      "Indinavir":"CC(C)(C)NC(=O)[C@@H]1CN(CC2=CN=CC=C2)CCN1C[C@@H](O)C[C@@H](CC1=CC=CC=C1)C(=O)N[C@@H]1[C@H](O)CC2=CC=CC=C12",
#                      "Theophylline":"CN1C2=C(NC=N2)C(=O)N(C)C1=O"}

dt1 = ['Alimentary tract and metabolism'] * 100
dt2 = ['Cardiovascular system'] * 100
dt3 = ['Antinfectives for systemic use'] * 100
dt4 = ['Nervous system'] * 100


drug_types = dt1 + dt2 + dt3 + dt4

a = torch.tensor([[0.5829],
[0.9461],
[0.8325],
[0.8255],
[0.8019],
[0.7910],
[0.7821],
[0.7777],
[0.7735],
[0.7720],
[0.7680],
[0.7591],
[0.7564],
[0.7561],
[0.7522],
[0.7504],
[0.7407],
[0.7398],
[0.7373],
[0.7360],
[0.7358],
[0.7351],
[0.7335],
[0.7282],
[0.7110],
[0.7069],
[0.7016],
[0.7003],
[0.6991],
[0.6984],
[0.6943],
[0.6920],
[0.6905],
[0.6900],
[0.6815],
[0.6763],
[0.6763],
[0.6657],
[0.6644],
[0.6580],
[0.6495],
[0.6413],
[0.6409],
[0.6400],
[0.6369],
[0.6355],
[0.6343],
[0.6215],
[0.6212],
[0.6164],
[0.6078],
[0.6029],
[0.5999],
[0.5994],
[0.5967],
[0.5940],
[0.5888],
[0.5859],
[0.5842],
[0.5755],
[0.5723],
[0.5694],
[0.5685],
[0.5548],
[0.5531],
[0.5500],
[0.5497],
[0.5465],
[0.5424],
[0.5417],
[0.5386],
[0.5374],
[0.5359],
[0.5353],
[0.5346],
[0.5331],
[0.5319],
[0.5277],
[0.5242],
[0.5237],
[0.5182],
[0.5041],
[0.5005],
[0.4978],
[0.4975],
[0.4969],
[0.4937],
[0.4910],
[0.4860],
[0.4847],
[0.4786],
[0.4763],
[0.4729],
[0.4689],
[0.4674],
[0.4636],
[0.4608],
[0.4591],
[0.4538],
[0.4521],
[0.5424],
[0.5405],
[0.5397],
[0.5282],
[0.5265],
[0.5245],
[0.5204],
[0.5153],
[0.5057],
[0.5048],
[0.5033],
[0.5007],
[0.5007],
[0.5001],
[0.4963],
[0.4960],
[0.4958],
[0.4945],
[0.4878],
[0.4867],
[0.4859],
[0.4855],
[0.4851],
[0.4832],
[0.4812],
[0.4783],
[0.4745],
[0.4728],
[0.4701],
[0.4661],
[0.4653],
[0.4648],
[0.4645],
[0.4615],
[0.4593],
[0.4577],
[0.4546],
[0.4523],
[0.4492],
[0.4457],
[0.4444],
[0.4393],
[0.4386],
[0.4382],
[0.4370],
[0.4354],
[0.4333],
[0.4310],
[0.4268],
[0.4226],
[0.4206],
[0.4193],
[0.4157],
[0.4143],
[0.4089],
[0.4074],
[0.4001],
[0.3980],
[0.3965],
[0.3955],
[0.3893],
[0.3879],
[0.3873],
[0.3847],
[0.3782],
[0.3769],
[0.3768],
[0.3755],
[0.3751],
[0.3723],
[0.3693],
[0.3671],
[0.3598],
[0.3590],
[0.3570],
[0.3309],
[0.3190],
[0.3085],
[0.2992],
[0.2901],
[0.2808],
[0.2682],
[0.2611],
[0.2593],
[0.2574],
[0.2521],
[0.2457],
[0.2412],
[0.2383],
[0.2212],
[0.2197],
[0.1939],
[0.1824],
[0.1755],
[0.1574],
[0.1422],
[0.1412],
[0.1309],
[0.1192],
[0.1053],
[0.5343],
[0.5307],
[0.5302],
[0.5208],
[0.5204],
[0.5204],
[0.5198],
[0.5145],
[0.5141],
[0.5105],
[0.5083],
[0.5045],
[0.5024],
[0.4997],
[0.4966],
[0.4961],
[0.4825],
[0.4775],
[0.4770],
[0.4717],
[0.4707],
[0.4683],
[0.4667],
[0.4664],
[0.4637],
[0.4586],
[0.4541],
[0.4492],
[0.4484],
[0.4483],
[0.4479],
[0.4478],
[0.4473],
[0.4458],
[0.4426],
[0.4399],
[0.4394],
[0.4288],
[0.4256],
[0.4193],
[0.4188],
[0.4175],
[0.4170],
[0.4133],
[0.4130],
[0.4130],
[0.4101],
[0.4074],
[0.4070],
[0.4044],
[0.4015],
[0.3944],
[0.3941],
[0.3902],
[0.3901],
[0.3900],
[0.3889],
[0.3859],
[0.3813],
[0.3800],
[0.3788],
[0.3786],
[0.3699],
[0.3665],
[0.3633],
[0.3624],
[0.3621],
[0.3615],
[0.3597],
[0.3412],
[0.3408],
[0.3289],
[0.3256],
[0.3240],
[0.3134],
[0.2986],
[0.2942],
[0.2908],
[0.2784],
[0.2759],
[0.2732],
[0.2638],
[0.2523],
[0.2355],
[0.2327],
[0.2227],
[0.2111],
[0.1922],
[0.1828],
[0.1806],
[0.1659],
[0.1654],
[0.1554],
[0.1496],
[0.1482],
[0.1469],
[0.1437],
[0.1250],
[0.1206],
[0.1132],
[0.3701],
[0.3683],
[0.3675],
[0.3620],
[0.3590],
[0.3585],
[0.3575],
[0.3561],
[0.3548],
[0.3514],
[0.3447],
[0.3437],
[0.3426],
[0.3328],
[0.3274],
[0.8254],
[0.8141],
[0.8061],
[0.8025],
[0.8017],
[0.7995],
[0.7988],
[0.7846],
[0.7834],
[0.7806],
[0.7751],
[0.7738],
[0.7703],
[0.7659],
[0.7631],
[0.7616],
[0.7570],
[0.7562],
[0.7536],
[0.7530],
[0.7495],
[0.7490],
[0.7485],
[0.7454],
[0.7446],
[0.7442],
[0.7397],
[0.7386],
[0.7382],
[0.7337],
[0.4867],
[0.4799],
[0.4775],
[0.4755],
[0.4736],
[0.4727],
[0.4689],
[0.4688],
[0.4687],
[0.4685],
[0.4679],
[0.4673],
[0.4665],
[0.4655],
[0.4630],
[0.6174],
[0.6153],
[0.6140],
[0.6133],
[0.6111],
[0.6107],
[0.6079],
[0.5958],
[0.5948],
[0.5916],
[0.5896],
[0.5888],
[0.5875],
[0.5827],
[0.5814],
[0.5803],
[0.5744],
[0.5731],
[0.5727],
[0.5699],
[0.5679],
[0.5645],
[0.5620],
[0.5608],
[0.5574],
[0.5566],
[0.5494],
[0.5491],
[0.5463],
[0.5452],
[0.5440],
[0.5394],
[0.5358],
[0.5322],
[0.5314],
[0.5293],
[0.5281],
[0.5266],
[0.5256],
[0.5251]])

print(len(a))
b = 1-a
weights1_normalized = torch.cat((a, b), dim=1)
# a = a.mean(dim=1)
# weights1_normalized = a / a.sum(dim=1, keepdim=True)
# print(weights1_normalized)222d
b = np.array(weights1_normalized)
# print(b)
weights = b
weights_df = pd.DataFrame(weights, columns=['Sequence Feature', 'Graph Feature'])
# weights_df['Drug Type'] = np.random.choice(drug_types, 100)
weights_df['Drug Type'] = drug_types

sns.set(style="ticks")
ax = sns.violinplot(x="Drug Type", y="value", hue="variable",
                    data=pd.melt(weights_df, id_vars=['Drug Type']),
                    split=True, inner="quartile", palette=["cornsilk", "lightgreen"])
# 设置横纵坐标标签
# ax.set_xlabel('Drug Type', fontsize=14)
# ax.set_ylabel('Weight', fontsize=14)

# 显示图形
plt.xticks(rotation=10)

plt.savefig("violin.pdf", bbox_inches='tight')
# plt.show()


# case study
# [0.6983]
# [0.3166]
# [0.5085]
# [0.7370]
# [0.1731]
# [0.8502]
# [0.8907]
# [0.8691]
# [0.8062]
# [0.9015]
# [0.8591]
# [0.8349]
# [0.5310]
# [0.4794]
# [0.8699]
# [0.8741]
# [0.8508]
# [0.7580]
# [0.8788]
# [0.9082]
# [0.8762]
# [0.8924]
# [0.9516]
# [0.6646]
# [0.7911]
# [0.8052]
# [0.8521]
# [0.7012]
# [0.8328]
# [0.7223]
# [0.8578]
# [0.6898]
# [0.7779]
# [0.7287]
# [0.4844]
# [0.8912]
# [0.4210]
# [0.3064]
# [0.2084]
# [0.3955]
# [0.3554]
# [0.5226]
# [0.4090]
# [0.4222]

# tensor([[0.9522],
#         [0.9516],
#         [0.9502],
#         [0.9415],
#         [0.9673],
#         [0.9512],
#         [0.9452],
#         [0.9700],
#         [0.9515],
#         [0.9491],
#         [0.9718],
#         [0.9536],
#         [0.9478],
#         [0.9712],
#         [0.9538],
#         [0.8808],
#         [0.9435],
#         [0.9647],
#         [0.9563],
#         [0.9484],
#         [0.9429],
#         [0.9554]]